syntax = "proto3";

package mpdb;

option go_package = "github.com/hshibli2002/mbplayer/pkg/grpcapi";


service UserService {

  //  CREATE REQUESTS
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {}

  //  READ REQUESTS
  rpc GetUserById(GetUserByIdRequest) returns (GetUserByIdResponse) {}
  rpc GetUserByUsername(GetUsernameRequest) returns (GetUsernameResponse) {}
  rpc GetUserByEmail(GetEmailRequest) returns (GetEmailResponse) {}
  rpc GetAllUsers(GetAllUsersRequest) returns (GetAllUsersResponse) {}

  //  UPDATE REQUESTS
  rpc UpdateUsername(UpdateUsernameRequest) returns (UpdateUsernameResponse) {}
  rpc UpdateEmail(UpdateUserEmailRequest) returns (UpdateUserEmailResponse) {}

  //  DELETE REQUESTS
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {}

  //Additional Requests
  rpc IncrementLikes(IncrementLikesRequest) returns (IncrementLikesResponse) {}
  rpc IncrementFollowingCount(IncrementFollowingCountRequest) returns (IncrementFollowingCountResponse) {}
}

message User {
  int64 user_id = 1;          // Unique identifier for the user
  string username = 2;        // User's username
  string email = 3;           // User's email address
  string password = 4;        // User's password
  int32 likes_given = 5;      // Total number of likes given by the user
  int32 follows_given = 6;    // Total number of follows given by the user
}

message CreateUserRequest {
  string username = 1;        // User's username
  string email = 2;           // User's email address
  string password = 3;        // User's password
}

message CreateUserResponse {
  User user = 1;              // User object
}

message GetUserByIdRequest {
  int64 user_id = 1;          // Unique identifier for the user
}

message GetUserByIdResponse {
  User user = 1;              // User object
}

message GetUsernameRequest {
  string username = 1;        // User's username
}

message GetUsernameResponse {
  User user = 1;              // User object
}

message GetEmailRequest {
  string email = 1;           // User's email address
}

message GetEmailResponse {
  User user = 1;              // User object
}

message GetAllUsersRequest {}

message GetAllUsersResponse {
  bool Success = 1;          // Success status
  repeated User users = 2;    // List of all users
}

message UpdateUsernameRequest {
  int64 user_id = 1;          // Unique identifier for the user
  string username = 2;        // User's username
}

message UpdateUsernameResponse {
  bool success = 1;          // Success status
  string message = 2;        // Message
}

message UpdateUserEmailRequest {
  int64 user_id = 1;          // Unique identifier for the user
  string email = 2;           // User's email address
}

message UpdateUserEmailResponse {
  bool success = 1;          // Success status
  string message = 2;        // Message
}

message DeleteUserRequest {
  int64 user_id = 1;          // Unique identifier for the user
}

message DeleteUserResponse {
  bool success = 1;          // Success status
  string message = 2;        // Message
}

message IncrementLikesRequest {
  int64 user_id = 1;          // Unique identifier for the user
  int32 likes_given = 2;      // Total number of likes given by the user
}

message IncrementLikesResponse {
  bool success = 1;          // Success status
  string message = 2;        // Message
}

message IncrementFollowingCountRequest {
  int64 user_id = 1;          // Unique identifier for the user
  int32 follows_given = 2;    // Total number of follows given by the user
}

message IncrementFollowingCountResponse {
  bool success = 1;          // Success status
  string message = 2;        // Message
}