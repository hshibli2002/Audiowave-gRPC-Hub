// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0--rc3
// source: song_service.proto

package grpcapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SongsService_CreateSong_FullMethodName              = "/mpdb.SongsService/CreateSong"
	SongsService_GetSongById_FullMethodName             = "/mpdb.SongsService/GetSongById"
	SongsService_GetSongsByArtistId_FullMethodName      = "/mpdb.SongsService/GetSongsByArtistId"
	SongsService_GetSongsByArtistName_FullMethodName    = "/mpdb.SongsService/GetSongsByArtistName"
	SongsService_GetSongsByTitle_FullMethodName         = "/mpdb.SongsService/GetSongsByTitle"
	SongsService_GetSongsByPlaylistId_FullMethodName    = "/mpdb.SongsService/GetSongsByPlaylistId"
	SongsService_UpdateSongTitle_FullMethodName         = "/mpdb.SongsService/UpdateSongTitle"
	SongsService_IncrementSongLikesCount_FullMethodName = "/mpdb.SongsService/IncrementSongLikesCount"
	SongsService_RemoveSongFromPlaylist_FullMethodName  = "/mpdb.SongsService/RemoveSongFromPlaylist"
	SongsService_DeleteSong_FullMethodName              = "/mpdb.SongsService/DeleteSong"
)

// SongsServiceClient is the client API for SongsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SongsServiceClient interface {
	// CREATE REQUESTS
	CreateSong(ctx context.Context, in *CreateSongRequest, opts ...grpc.CallOption) (*CreateSongResponse, error)
	// READ REQUESTS
	GetSongById(ctx context.Context, in *GetSongByIdRequest, opts ...grpc.CallOption) (*GetSongByIdResponse, error)
	GetSongsByArtistId(ctx context.Context, in *GetSongsByArtistIdRequest, opts ...grpc.CallOption) (*GetSongsByArtistIdResponse, error)
	GetSongsByArtistName(ctx context.Context, in *GetSongsByArtistNameRequest, opts ...grpc.CallOption) (*GetSongsByArtistNameResponse, error)
	GetSongsByTitle(ctx context.Context, in *GetSongsByTitleRequest, opts ...grpc.CallOption) (*GetSongsByTitleResponse, error)
	GetSongsByPlaylistId(ctx context.Context, in *GetSongsByPlaylistIdRequest, opts ...grpc.CallOption) (*GetSongsByPlaylistIdResponse, error)
	// UPDATE REQUESTS
	UpdateSongTitle(ctx context.Context, in *UpdateSongTitleRequest, opts ...grpc.CallOption) (*UpdateSongTitleResponse, error)
	IncrementSongLikesCount(ctx context.Context, in *IncrementSongLikesCountRequest, opts ...grpc.CallOption) (*IncrementSongLikesCountResponse, error)
	// DELETE REQUESTS
	RemoveSongFromPlaylist(ctx context.Context, in *RemoveSongFromPlaylistRequest, opts ...grpc.CallOption) (*RemoveSongFromPlaylistResponse, error)
	DeleteSong(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error)
}

type songsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSongsServiceClient(cc grpc.ClientConnInterface) SongsServiceClient {
	return &songsServiceClient{cc}
}

func (c *songsServiceClient) CreateSong(ctx context.Context, in *CreateSongRequest, opts ...grpc.CallOption) (*CreateSongResponse, error) {
	out := new(CreateSongResponse)
	err := c.cc.Invoke(ctx, SongsService_CreateSong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) GetSongById(ctx context.Context, in *GetSongByIdRequest, opts ...grpc.CallOption) (*GetSongByIdResponse, error) {
	out := new(GetSongByIdResponse)
	err := c.cc.Invoke(ctx, SongsService_GetSongById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) GetSongsByArtistId(ctx context.Context, in *GetSongsByArtistIdRequest, opts ...grpc.CallOption) (*GetSongsByArtistIdResponse, error) {
	out := new(GetSongsByArtistIdResponse)
	err := c.cc.Invoke(ctx, SongsService_GetSongsByArtistId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) GetSongsByArtistName(ctx context.Context, in *GetSongsByArtistNameRequest, opts ...grpc.CallOption) (*GetSongsByArtistNameResponse, error) {
	out := new(GetSongsByArtistNameResponse)
	err := c.cc.Invoke(ctx, SongsService_GetSongsByArtistName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) GetSongsByTitle(ctx context.Context, in *GetSongsByTitleRequest, opts ...grpc.CallOption) (*GetSongsByTitleResponse, error) {
	out := new(GetSongsByTitleResponse)
	err := c.cc.Invoke(ctx, SongsService_GetSongsByTitle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) GetSongsByPlaylistId(ctx context.Context, in *GetSongsByPlaylistIdRequest, opts ...grpc.CallOption) (*GetSongsByPlaylistIdResponse, error) {
	out := new(GetSongsByPlaylistIdResponse)
	err := c.cc.Invoke(ctx, SongsService_GetSongsByPlaylistId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) UpdateSongTitle(ctx context.Context, in *UpdateSongTitleRequest, opts ...grpc.CallOption) (*UpdateSongTitleResponse, error) {
	out := new(UpdateSongTitleResponse)
	err := c.cc.Invoke(ctx, SongsService_UpdateSongTitle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) IncrementSongLikesCount(ctx context.Context, in *IncrementSongLikesCountRequest, opts ...grpc.CallOption) (*IncrementSongLikesCountResponse, error) {
	out := new(IncrementSongLikesCountResponse)
	err := c.cc.Invoke(ctx, SongsService_IncrementSongLikesCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) RemoveSongFromPlaylist(ctx context.Context, in *RemoveSongFromPlaylistRequest, opts ...grpc.CallOption) (*RemoveSongFromPlaylistResponse, error) {
	out := new(RemoveSongFromPlaylistResponse)
	err := c.cc.Invoke(ctx, SongsService_RemoveSongFromPlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) DeleteSong(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error) {
	out := new(DeleteSongResponse)
	err := c.cc.Invoke(ctx, SongsService_DeleteSong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SongsServiceServer is the server API for SongsService service.
// All implementations must embed UnimplementedSongsServiceServer
// for forward compatibility
type SongsServiceServer interface {
	// CREATE REQUESTS
	CreateSong(context.Context, *CreateSongRequest) (*CreateSongResponse, error)
	// READ REQUESTS
	GetSongById(context.Context, *GetSongByIdRequest) (*GetSongByIdResponse, error)
	GetSongsByArtistId(context.Context, *GetSongsByArtistIdRequest) (*GetSongsByArtistIdResponse, error)
	GetSongsByArtistName(context.Context, *GetSongsByArtistNameRequest) (*GetSongsByArtistNameResponse, error)
	GetSongsByTitle(context.Context, *GetSongsByTitleRequest) (*GetSongsByTitleResponse, error)
	GetSongsByPlaylistId(context.Context, *GetSongsByPlaylistIdRequest) (*GetSongsByPlaylistIdResponse, error)
	// UPDATE REQUESTS
	UpdateSongTitle(context.Context, *UpdateSongTitleRequest) (*UpdateSongTitleResponse, error)
	IncrementSongLikesCount(context.Context, *IncrementSongLikesCountRequest) (*IncrementSongLikesCountResponse, error)
	// DELETE REQUESTS
	RemoveSongFromPlaylist(context.Context, *RemoveSongFromPlaylistRequest) (*RemoveSongFromPlaylistResponse, error)
	DeleteSong(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error)
	mustEmbedUnimplementedSongsServiceServer()
}

// UnimplementedSongsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSongsServiceServer struct {
}

func (UnimplementedSongsServiceServer) CreateSong(context.Context, *CreateSongRequest) (*CreateSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSong not implemented")
}
func (UnimplementedSongsServiceServer) GetSongById(context.Context, *GetSongByIdRequest) (*GetSongByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongById not implemented")
}
func (UnimplementedSongsServiceServer) GetSongsByArtistId(context.Context, *GetSongsByArtistIdRequest) (*GetSongsByArtistIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongsByArtistId not implemented")
}
func (UnimplementedSongsServiceServer) GetSongsByArtistName(context.Context, *GetSongsByArtistNameRequest) (*GetSongsByArtistNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongsByArtistName not implemented")
}
func (UnimplementedSongsServiceServer) GetSongsByTitle(context.Context, *GetSongsByTitleRequest) (*GetSongsByTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongsByTitle not implemented")
}
func (UnimplementedSongsServiceServer) GetSongsByPlaylistId(context.Context, *GetSongsByPlaylistIdRequest) (*GetSongsByPlaylistIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongsByPlaylistId not implemented")
}
func (UnimplementedSongsServiceServer) UpdateSongTitle(context.Context, *UpdateSongTitleRequest) (*UpdateSongTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSongTitle not implemented")
}
func (UnimplementedSongsServiceServer) IncrementSongLikesCount(context.Context, *IncrementSongLikesCountRequest) (*IncrementSongLikesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementSongLikesCount not implemented")
}
func (UnimplementedSongsServiceServer) RemoveSongFromPlaylist(context.Context, *RemoveSongFromPlaylistRequest) (*RemoveSongFromPlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSongFromPlaylist not implemented")
}
func (UnimplementedSongsServiceServer) DeleteSong(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSong not implemented")
}
func (UnimplementedSongsServiceServer) mustEmbedUnimplementedSongsServiceServer() {}

// UnsafeSongsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SongsServiceServer will
// result in compilation errors.
type UnsafeSongsServiceServer interface {
	mustEmbedUnimplementedSongsServiceServer()
}

func RegisterSongsServiceServer(s grpc.ServiceRegistrar, srv SongsServiceServer) {
	s.RegisterService(&SongsService_ServiceDesc, srv)
}

func _SongsService_CreateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).CreateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_CreateSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).CreateSong(ctx, req.(*CreateSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_GetSongById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).GetSongById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_GetSongById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).GetSongById(ctx, req.(*GetSongByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_GetSongsByArtistId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongsByArtistIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).GetSongsByArtistId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_GetSongsByArtistId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).GetSongsByArtistId(ctx, req.(*GetSongsByArtistIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_GetSongsByArtistName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongsByArtistNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).GetSongsByArtistName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_GetSongsByArtistName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).GetSongsByArtistName(ctx, req.(*GetSongsByArtistNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_GetSongsByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongsByTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).GetSongsByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_GetSongsByTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).GetSongsByTitle(ctx, req.(*GetSongsByTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_GetSongsByPlaylistId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongsByPlaylistIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).GetSongsByPlaylistId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_GetSongsByPlaylistId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).GetSongsByPlaylistId(ctx, req.(*GetSongsByPlaylistIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_UpdateSongTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSongTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).UpdateSongTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_UpdateSongTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).UpdateSongTitle(ctx, req.(*UpdateSongTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_IncrementSongLikesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementSongLikesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).IncrementSongLikesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_IncrementSongLikesCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).IncrementSongLikesCount(ctx, req.(*IncrementSongLikesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_RemoveSongFromPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSongFromPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).RemoveSongFromPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_RemoveSongFromPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).RemoveSongFromPlaylist(ctx, req.(*RemoveSongFromPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_DeleteSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).DeleteSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_DeleteSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).DeleteSong(ctx, req.(*DeleteSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SongsService_ServiceDesc is the grpc.ServiceDesc for SongsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SongsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mpdb.SongsService",
	HandlerType: (*SongsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSong",
			Handler:    _SongsService_CreateSong_Handler,
		},
		{
			MethodName: "GetSongById",
			Handler:    _SongsService_GetSongById_Handler,
		},
		{
			MethodName: "GetSongsByArtistId",
			Handler:    _SongsService_GetSongsByArtistId_Handler,
		},
		{
			MethodName: "GetSongsByArtistName",
			Handler:    _SongsService_GetSongsByArtistName_Handler,
		},
		{
			MethodName: "GetSongsByTitle",
			Handler:    _SongsService_GetSongsByTitle_Handler,
		},
		{
			MethodName: "GetSongsByPlaylistId",
			Handler:    _SongsService_GetSongsByPlaylistId_Handler,
		},
		{
			MethodName: "UpdateSongTitle",
			Handler:    _SongsService_UpdateSongTitle_Handler,
		},
		{
			MethodName: "IncrementSongLikesCount",
			Handler:    _SongsService_IncrementSongLikesCount_Handler,
		},
		{
			MethodName: "RemoveSongFromPlaylist",
			Handler:    _SongsService_RemoveSongFromPlaylist_Handler,
		},
		{
			MethodName: "DeleteSong",
			Handler:    _SongsService_DeleteSong_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "song_service.proto",
}
