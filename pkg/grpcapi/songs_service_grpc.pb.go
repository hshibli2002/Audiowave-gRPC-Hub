// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0--rc3
// source: songs_service.proto

package grpcapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SongsService_GetSongById_FullMethodName         = "/mpdb.SongsService/GetSongById"
	SongsService_GetSongByTitle_FullMethodName      = "/mpdb.SongsService/GetSongByTitle"
	SongsService_GetSongByArtistId_FullMethodName   = "/mpdb.SongsService/GetSongByArtistId"
	SongsService_GetSongDuration_FullMethodName     = "/mpdb.SongsService/GetSongDuration"
	SongsService_GetSongCreationTime_FullMethodName = "/mpdb.SongsService/GetSongCreationTime"
)

// SongsServiceClient is the client API for SongsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SongsServiceClient interface {
	GetSongById(ctx context.Context, in *GetSongByIdRequest, opts ...grpc.CallOption) (*GetSongByIdResponse, error)
	GetSongByTitle(ctx context.Context, in *GetSongByTitleRequest, opts ...grpc.CallOption) (*GetSongByTitleResponse, error)
	GetSongByArtistId(ctx context.Context, in *GetSongByArtistIdRequest, opts ...grpc.CallOption) (*GetSongByArtistIdResponse, error)
	GetSongDuration(ctx context.Context, in *GetSongDurationRequest, opts ...grpc.CallOption) (*GetSongDurationResponse, error)
	GetSongCreationTime(ctx context.Context, in *GetSongCreationTimeRequest, opts ...grpc.CallOption) (*GetSongCreationTimeResponse, error)
}

type songsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSongsServiceClient(cc grpc.ClientConnInterface) SongsServiceClient {
	return &songsServiceClient{cc}
}

func (c *songsServiceClient) GetSongById(ctx context.Context, in *GetSongByIdRequest, opts ...grpc.CallOption) (*GetSongByIdResponse, error) {
	out := new(GetSongByIdResponse)
	err := c.cc.Invoke(ctx, SongsService_GetSongById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) GetSongByTitle(ctx context.Context, in *GetSongByTitleRequest, opts ...grpc.CallOption) (*GetSongByTitleResponse, error) {
	out := new(GetSongByTitleResponse)
	err := c.cc.Invoke(ctx, SongsService_GetSongByTitle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) GetSongByArtistId(ctx context.Context, in *GetSongByArtistIdRequest, opts ...grpc.CallOption) (*GetSongByArtistIdResponse, error) {
	out := new(GetSongByArtistIdResponse)
	err := c.cc.Invoke(ctx, SongsService_GetSongByArtistId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) GetSongDuration(ctx context.Context, in *GetSongDurationRequest, opts ...grpc.CallOption) (*GetSongDurationResponse, error) {
	out := new(GetSongDurationResponse)
	err := c.cc.Invoke(ctx, SongsService_GetSongDuration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songsServiceClient) GetSongCreationTime(ctx context.Context, in *GetSongCreationTimeRequest, opts ...grpc.CallOption) (*GetSongCreationTimeResponse, error) {
	out := new(GetSongCreationTimeResponse)
	err := c.cc.Invoke(ctx, SongsService_GetSongCreationTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SongsServiceServer is the server API for SongsService service.
// All implementations must embed UnimplementedSongsServiceServer
// for forward compatibility
type SongsServiceServer interface {
	GetSongById(context.Context, *GetSongByIdRequest) (*GetSongByIdResponse, error)
	GetSongByTitle(context.Context, *GetSongByTitleRequest) (*GetSongByTitleResponse, error)
	GetSongByArtistId(context.Context, *GetSongByArtistIdRequest) (*GetSongByArtistIdResponse, error)
	GetSongDuration(context.Context, *GetSongDurationRequest) (*GetSongDurationResponse, error)
	GetSongCreationTime(context.Context, *GetSongCreationTimeRequest) (*GetSongCreationTimeResponse, error)
	mustEmbedUnimplementedSongsServiceServer()
}

// UnimplementedSongsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSongsServiceServer struct {
}

func (UnimplementedSongsServiceServer) GetSongById(context.Context, *GetSongByIdRequest) (*GetSongByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongById not implemented")
}
func (UnimplementedSongsServiceServer) GetSongByTitle(context.Context, *GetSongByTitleRequest) (*GetSongByTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongByTitle not implemented")
}
func (UnimplementedSongsServiceServer) GetSongByArtistId(context.Context, *GetSongByArtistIdRequest) (*GetSongByArtistIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongByArtistId not implemented")
}
func (UnimplementedSongsServiceServer) GetSongDuration(context.Context, *GetSongDurationRequest) (*GetSongDurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongDuration not implemented")
}
func (UnimplementedSongsServiceServer) GetSongCreationTime(context.Context, *GetSongCreationTimeRequest) (*GetSongCreationTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongCreationTime not implemented")
}
func (UnimplementedSongsServiceServer) mustEmbedUnimplementedSongsServiceServer() {}

// UnsafeSongsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SongsServiceServer will
// result in compilation errors.
type UnsafeSongsServiceServer interface {
	mustEmbedUnimplementedSongsServiceServer()
}

func RegisterSongsServiceServer(s grpc.ServiceRegistrar, srv SongsServiceServer) {
	s.RegisterService(&SongsService_ServiceDesc, srv)
}

func _SongsService_GetSongById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).GetSongById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_GetSongById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).GetSongById(ctx, req.(*GetSongByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_GetSongByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongByTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).GetSongByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_GetSongByTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).GetSongByTitle(ctx, req.(*GetSongByTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_GetSongByArtistId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongByArtistIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).GetSongByArtistId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_GetSongByArtistId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).GetSongByArtistId(ctx, req.(*GetSongByArtistIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_GetSongDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).GetSongDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_GetSongDuration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).GetSongDuration(ctx, req.(*GetSongDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongsService_GetSongCreationTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongCreationTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongsServiceServer).GetSongCreationTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongsService_GetSongCreationTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongsServiceServer).GetSongCreationTime(ctx, req.(*GetSongCreationTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SongsService_ServiceDesc is the grpc.ServiceDesc for SongsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SongsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mpdb.SongsService",
	HandlerType: (*SongsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSongById",
			Handler:    _SongsService_GetSongById_Handler,
		},
		{
			MethodName: "GetSongByTitle",
			Handler:    _SongsService_GetSongByTitle_Handler,
		},
		{
			MethodName: "GetSongByArtistId",
			Handler:    _SongsService_GetSongByArtistId_Handler,
		},
		{
			MethodName: "GetSongDuration",
			Handler:    _SongsService_GetSongDuration_Handler,
		},
		{
			MethodName: "GetSongCreationTime",
			Handler:    _SongsService_GetSongCreationTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "songs_service.proto",
}
